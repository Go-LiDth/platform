Some Influential Environmental Variables;

During build time the built BrowserPlus platform will be installed
(user-scoped) on your machine.  Certain environment variables allow
you to control how that installed version is configured:

  BP_LOG_LEVEL - one of info, debug, warn, or error.  Controls how vigorously
                 BrowserPlus logs in its logfiles.  
  BP_LOG_SIZE_KB - size in KB above which to rollover logfiles.
  BP_DISTRO_SERVERS - a comma separated list of hostnames which are the
                 distribution servers you'd like BrowserPlus to query
                 for permissions, updates, and services.

Building on OSX:
  Setting up your environment:
    1. install the latest version of XCode (at time of writing 2.5 or 3.0 for tiger/leopard)
    2. install cmake version 2.8.1 or greater from http://www.cmake.org/cmake/resources/software.html
    3. install ruby from http://www.ruby-lang.org
 
  Building the tree:    
    1. cd <path to public_platform>/external
    2. ruby build.rb keepSource (will take a while, only needs to be done once)
    3. cd <path to public_platform>
    4. mkdir build
    5. cd build
    6. cmake ../src 
         or
       cmake -G Xcode ../src if you like Xcode
    7. make -j3
         or
       open BrowserPlus.xcodeproj (or xcodebuild)


Building on win32:
  Setting up your environment:
    1. install Visual Studio 2008 Pro or equiv
    2. install Visual Studio 2008 SP1
    3. install "Microsoft Windows SDK for Windows 7 and 
       .NET Framework 3.5 Service Pack 1" from:
       http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=c17ba869-9671-4330-a63e-1fd44e0e2505
    4. run the sdk configuration tool at:
       c:\Program Files\Microsoft SDKs\Windows\v7.0\Setup\WindowsSdkVer 
       and set v7.0 as the current sdk
    5. (optional) Add a new user environment variable: 
          Name: WindowsSdkDir
          Value: C:\Program Files\Microsoft SDKs\Windows\v7.0\
       This will ensure that in cases where VS launches cmake to regenerate 
       .vcproj files, this environment variable, which is used in some of
       our cmake scripts, will be expanded properly.  
       Without this, invalid .vcproj files can be generated when cmake is 
       launched by VS.
    6. (optional) Add %WindowsSdkDir%Bin to your path.
       This will allow you to easily invoke tools such as mt.exe from your
       command line.
    7. install cmake version 2.6.2 or greater from:
       http://www.cmake.org/cmake/resources/software.html
       during install, select "add cmake to PATH for this user (or all users)"
    8. install ruby from: http://www.ruby-lang.org 
       and add C:\ruby\bin to your PATH
    9. (optional) Install the latest version of doxygen if you would
       like to have documentation generated for various projects which
       do this (like ServiceAPI).  (http://www.stack.nl/~dimitiri/doxygen/)
   10. (if you want ability to do prod builds) 
       install the latest JRE from:
       http://java.sun.com/javase/downloads/index.jsp
       ensure that JAVA_HOME is set correctly (e.g. C:\Program Files\Java\jdk1.6.0_14)
   11. (if you want ability to do prod builds) 
       install the latest ANT from http://ant.apache.org
       ensure that ANT_HOME is set correctly. 
       ensure that ant binary directory is in your path (e.g. %ANT_HOME%\bin)
   12. install the latest ActivePerl from:
       https://www.activestate.com/activeperl/downloads/ 
       ensure that perl is in your path from a vs command shell 
       (you'll need this at least for building openssl in external/)
   13. install patch.exe from: 
       http://gnuwin32.sourceforge.net/packages/patch.htm
       rename patch.exe to ptch.exe and put it in your path
   14. install 7z.exe from: http://www.7-zip.org
       and add it to your path

  Building the tree
    1. start a windows command prompt with visual studio env set 
       (e.g. invoke vsvars32.bat)
    2. cd <path to public_platform>\external
    3. ruby build.rb keepSource (will take a while, only needs to be done once)
    4. cd <path to public_platform>
    5. mkdir build
    6. cd build
    7. cmake ..\src
    8. devenv BrowserPlus.sln 
         or
       devenv BrowserPlus.sln /Build {Debug,Release}
         or
       Launch VS08, open build\BrowserPlus.sln and build via the gui.
           
