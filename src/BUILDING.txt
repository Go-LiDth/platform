Some Influential Environment Variables;

During build time the built BrowserPlus platform will be installed
(user-scoped) on your machine.  Certain environment variables allow
you to control how that installed version is configured:

  BP_LOG_LEVEL - Controls how vigorously BrowserPlus logs in its logfiles.
                 (debug|info|warn|error|fatal)
  BP_LOG_SIZE_KB - size in KB above which to rollover logfiles.
  BP_LOG_DEST - desired destination for logging (file|console|win32).
                Not all system components respect this value, but many do.
                On windows, "win32" will cause OutputDebugString to be used 
                for logging.
  BP_LOG_TIME - How to report time in log statements (utc|local|msec).
                "local" is a convenient setting for developers.
                "msec" might be useful when profiling.
  BP_DISTRO_SERVERS - a comma separated list of hostnames which are the
                 distribution servers you'd like BrowserPlus to query
                 for permissions, updates, and services.

Required environment variables are:

  BP_PLATFORM_PATH - path to "public_platform", must be set
  BP_INTERNAL_SDK_PATH - path to built internal sdk, usually 
                $BP_PLATFORM_PATH/build/bpsdk_internal.  Must be set.

Note that when building production bpkgs (private_platform/docs/HowToShip.txt),
some env vars must be uset.  Adding the following to your ~/.profile or
~/.bashrc may be useful (change paths to reflect your dir structure):

function setDevEnv()
{
    export BP_LOG_LEVEL=debug
    export BP_LOG_TIME=local
    export BP_DISTRO_SERVERS="http://bp-dev.corp.yahoo.com,http://bp-int.corp.yahoo.com,http://browserplus.yahoo.com"
    export BP_PLATFORM_PATH=$HOME/work/projects/BrowserPlus/public_platform
    export BPSDK_PATH=$HOME/work/projects/BrowserPlus/public_platform/build/bpsdk
    export BP_INTERNAL_SDK_PATH=$HOME/work/projects/BrowserPlus/public_platform/build/bpsdk_internal
}

function setProdEnv()
{
    unset BP_LOG_LEVEL
    unset BP_LOG_TIME
    unset BP_DISTRO_SERVERS
}

setDevEnv

Now the env vars are set automatically, and you can just run "setProdEnv" when 
you need to build production bits.  When you're done building production bits,
just run "setDevEnv".


***************************************************************************
* NOTE:  Due to limitations with several of the 3rd party packages used   *
*        by BrowserPlus, the path to the BrowserPlus source (referred to  *
*        as <path to public_platform> below) cannot contain spaces.       *
***************************************************************************

Building on OSX:
  Setting up your environment:
    1. install git (available in MacPorts)
    2. install the latest version of XCode (at time of writing 2.5 or 3.0 for tiger/leopard)
       At install, make sure to select the Mac OS X 10.4 SDK option.
    3. install cmake version 2.8.1 or greater from http://www.cmake.org/cmake/resources/software.html
    4. install ruby from http://www.ruby-lang.org
    5. install git (available in MacPorts)
 
  Building the tree:    
    1. cd <path to public_platform>/external
    2. ruby build.rb (will take a while, only needs to be done once)
    3. cd <path to public_platform>
    4. mkdir build
    5. cd build
    6. cmake ../src 
         or
       cmake -G Xcode ../src if you like Xcode
    7. make -j3
         or
       open BrowserPlus.xcodeproj (or xcodebuild)


Building on win32:
  Setting up your environment:
    1. install msysgit from http://code.google.com/p/msysgit/downloads/list
    2. install Visual Studio 2008 Pro or equiv
    3. install Visual Studio 2008 SP1
    4. install "Microsoft Windows SDK for Windows 7 and 
       .NET Framework 3.5 Service Pack 1" from:
       http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=c17ba869-9671-4330-a63e-1fd44e0e2505
    5. run the sdk configuration tool at:
       c:\Program Files\Microsoft SDKs\Windows\v7.0\Setup\WindowsSdkVer 
       and set v7.0 as the current sdk
    6. (optional) Add a new user environment variable: 
          Name: WindowsSdkDir
          Value: C:\Program Files\Microsoft SDKs\Windows\v7.0\
       This will ensure that in cases where VS launches cmake to regenerate 
       .vcproj files, this environment variable, which is used in some of
       our cmake scripts, will be expanded properly.  
       Without this, invalid .vcproj files can be generated when cmake is 
       launched by VS.
    7. (optional) Add %WindowsSdkDir%Bin to your path.
       This will allow you to easily invoke tools such as mt.exe from your
       command line.
    8. install cmake version 2.8.0 or greater from:
       http://www.cmake.org/cmake/resources/software.html
       during install, select "add cmake to PATH for this user (or all users)"
    9. install ruby from: http://www.ruby-lang.org 
       and add C:\ruby\bin to your PATH
   10. (optional) Install the latest version of doxygen if you would
       like to have documentation generated for various projects which
       do this (like ServiceAPI).  (http://www.stack.nl/~dimitiri/doxygen/)
   11. (if you want ability to do prod builds) 
       install the latest JRE from:
       http://java.sun.com/javase/downloads/index.jsp
       ensure that JAVA_HOME is set correctly (e.g. C:\Program Files\Java\jdk1.6.0_14)
   12. (if you want ability to do prod builds) 
       install the latest ANT from http://ant.apache.org
       ensure that ANT_HOME is set correctly. 
       ensure that ant binary directory is in your path (e.g. %ANT_HOME%\bin)
   13. install the latest ActivePerl from:
       https://www.activestate.com/activeperl/downloads/ 
       ensure that perl is in your path from a vs command shell 
       (you'll need this at least for building openssl in external/)
   13. install patch.exe from: 
       http://gnuwin32.sourceforge.net/packages/patch.htm
       rename patch.exe to ptch.exe and put it in your path
   14. install 7z.exe from: http://www.7-zip.org
       and add it to your path

  Building the tree
    1. start a windows command prompt with visual studio env set 
       (e.g. invoke vsvars32.bat)
    2. cd <path to public_platform>\external
    3. ruby build.rb (will take a while, only needs to be done once)
    4. cd <path to public_platform>
    5. mkdir build
    6. cd build
    7. cmake ..\src
    8. devenv BrowserPlus.sln 
         or
       devenv BrowserPlus.sln /Build {Debug,Release}
         or
       Launch VS08, open build\BrowserPlus.sln and build via the gui.
           
