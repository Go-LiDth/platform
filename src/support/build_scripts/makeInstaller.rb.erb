#!/usr/bin/env ruby

# <%= $cmake["NoEditWarning"] %>

##########################################################
# makeInstaller.rb
# 
# Build up a collection of retargetable artifacts at the end of a build,
# This is everything that would be required to build installers and 
# update bpkgs which contain a specifiable set of 
# Make a browserplus install/update package from an SDK
#
# Created by Gordon Durand on Fri Oct 5 2007
# Copyright (c) 2009 Yahoo! Inc.  All rights reserved
#
#  NOTE!!
# 
#  If you add files to the update package, make sure to update
#  the platform install/update scripts in libs/installer/
#
###########################################

require 'rbconfig'
require 'fileutils'
require 'pathname'
include Config

if ARGV[0] =~ /help/ || $intDir == nil
    puts "Usage: ruby -s #{$0} [-verbose=<anything>] -intDir=<CMAKE_CFG_INTDIR> -buildDir=<path>"
    puts "  (e.g. ruby -s #{$0} -verbose=1) -intDir=Debug -buildDir=path/to/build)"
    exit 1
end

topDir = "<%= $cmake['CMAKE_CURRENT_SOURCE_DIR'] %>"
beVerbose = defined?($verbose) ? $verbose : false
bpVersion = "<%= $cmake["VersionString"] %>"

platform = nil
libSuffix = nil
exeSuffix = nil
if CONFIG['arch'] =~ /mswin/
    # you have my profound sympathy...
    platform = 'Windows'
    plat_fname = 'Win32'
    libSuffix = '.dll'
    exeSuffix = '.exe'
    instSuffix = exeSuffix
elsif CONFIG['arch'] =~ /linux/
    platform = 'Linux'
    plat_fname = platform
    libSuffix = '.so'
    exeSuffix = ''
    instSuffix = ""
else
    platform = 'Darwin'
    plat_fname = platform
    libSuffix = '.dylib'
    exeSuffix = ''
    instSuffix = ".dmg"
end

# make a pass thru dir removing .svn and .git turds
def flushTurds(dir, verbose) 
    Dir["#{dir}/**/.svn"].each do |name|
        FileUtils.rm_rf(name, :verbose => $beVerbose)
    end
    Dir["#{dir}/**/.git*"].each do |name|
        FileUtils.rm_rf(name, :verbose => $beVerbose)
    end
end

# find build directory, externals
buildDir = "<%= $cmake['CMAKE_CURRENT_BINARY_DIR'] %>"
externalsDir = File.expand_path(File.join(topDir, "..", "external"))

artifactsName = "pab_#{bpVersion}-#{plat_fname}"
artifactsDir = File.join($buildDir, artifactsName)
shippingBinsDir = File.join(buildDir, "ShippingBinaries")
shippingResDir = File.join(buildDir, "ShippingResources",
                                 bpVersion)

puts "Parameterizable artifacts bundle to be left in #{artifactsDir}"

# setup paths into update dir
updateDir = File.join(artifactsDir, "update")
FileUtils.rm_rf(updateDir, :verbose => $beVerbose)
FileUtils.mkdir_p(updateDir)
updateDaemonDir = File.join(updateDir, "daemon")
updatePluginsDir = File.join(updateDir, "plugins")
updatePrefPaneDir = File.join(updateDir, "prefPane")
updatePermsDir = File.join(updateDir, "permissions")
localizeUIScript = File.join(topDir, "support", "l10n", "localizeUI.rb")

# 
# platformInfo.json
#
FileUtils.install("#{$buildDir}/libs/installer/platformInfo.json",
                  updateDir, :verbose => $beVerbose)

#
# daemon
#
FileUtils.mkdir_p(updateDaemonDir, :mode => 0755, :verbose => $beVerbose)
FileUtils.install("#{shippingBinsDir}/BrowserPlusCore#{exeSuffix}",
                  updateDaemonDir, :verbose => $beVerbose)
FileUtils.install("#{topDir}/bins/browserpluscore/BrowserPlus.config",
                  updateDaemonDir, :verbose => $beVerbose)
FileUtils.install("#{$buildDir}/bins/browserpluscore/strings.json",
                  updateDaemonDir, :verbose => $beVerbose)

# install HTML user interface next to the daemon
updateUIDir = File.join(updateDaemonDir, "ui")
FileUtils.mkdir_p(updateUIDir, :mode => 0755, :verbose => $beVerbose)

Dir.glob(File.join(topDir, "bins", "browserpluscore", "ui", "*")) do |x|
    if (File.directory?(x))
        srcDir = x
        tgtDir = File.join(updateUIDir, File.basename(x))
        FileUtils.rm_rf(tgtDir, :verbose => $beVerbose)
        system("ruby -s #{localizeUIScript} -indir=#{srcDir} -outdir=#{tgtDir}")
    end
end

# on windows install preference panel ui as well
if platform == "Windows"
    tgtDir = File.join(updateDaemonDir, "ui", "preference_panel")
    srcDir = File.join(topDir, "bins", "config_panel", "ui")
    FileUtils.mkdir_p(tgtDir, :mode => 0755, :verbose => $beVerbose)
    FileUtils.rm_rf(tgtDir, :verbose => $beVerbose)
    system("ruby -s #{localizeUIScript} -indir=#{srcDir} -outdir=#{tgtDir}")
end

#
# plugins. 
#
FileUtils.mkdir_p(updatePluginsDir, :mode => 0755, :verbose => $beVerbose)
if platform == "Darwin"
    FileUtils.cp_r("#{shippingBinsDir}/BrowserPlus.plugin",
                   "#{updatePluginsDir}/BrowserPlus_#{bpVersion}.plugin",
                   :verbose => $beVerbose)
else
    ieDir = File.join(updatePluginsDir, "IE") 
    FileUtils.mkdir_p(ieDir, :verbose => $beVerbose)
    FileUtils.install("#{shippingBinsDir}/YBPAddon.dll", 
                      "#{ieDir}/YBPAddon_#{bpVersion}.dll",
                      :verbose => $beVerbose)
    
    npapiDir = File.join(updatePluginsDir, "NPAPI")
    FileUtils.mkdir_p(npapiDir, :verbose => $beVerbose)
    FileUtils.install("#{shippingBinsDir}/npybrowserplus.dll", 
                      "#{npapiDir}/npybrowserplus_#{bpVersion}.dll",
                      :verbose => $beVerbose)
end

#
# preferences panel
#
FileUtils.mkdir_p(updatePrefPaneDir, :mode => 0755, :verbose => $beVerbose)
if platform == "Darwin"
    FileUtils.cp_r("#{shippingBinsDir}/BrowserPlusPrefs.prefPane",
                   "#{updatePrefPaneDir}/BrowserPlusPrefs.prefPane",
                   :verbose => $beVerbose)
else
    FileUtils.cp("#{shippingBinsDir}/BrowserPlusPrefs.exe",
                 "#{updatePrefPaneDir}/BrowserPlusPrefs.exe",
                 :verbose => $beVerbose)
end

FileUtils.mkdir_p(updatePermsDir, :mode => 0755, :verbose => $beVerbose)
FileUtils.install("#{topDir}/support/signing/devel_certs/BrowserPlus.crt", 
                  updatePermsDir, 
                  :verbose => $beVerbose)

# executables go into updateDir
FileUtils.install("#{shippingBinsDir}/BrowserPlusUpdater#{exeSuffix}",
                  "#{updateDir}/BrowserPlusUpdater#{exeSuffix}",
                  :mode => 0755, :verbose => $beVerbose)
FileUtils.install("#{$buildDir}/libs/installer/misc/strings.json",
                  "#{updateDir}/strings.json",
                  :mode => 0644, :verbose => $beVerbose)
FileUtils.install("#{shippingBinsDir}/BrowserPlusUninstaller#{exeSuffix}",
                  "#{updateDir}/BrowserPlusUninstaller#{exeSuffix}",
                  :mode => 0755, :verbose => $beVerbose)

# windows also needs ybang.ico icon 
if platform == "Windows"
    FileUtils.install("#{topDir}/libs/installer/misc/ybang.ico",
                      "#{updateDir}/ybang.ico",
                      :mode => 0644, :verbose => $beVerbose)
end

# make a pass thru updateDir removing .svn and .git turds
flushTurds(updateDir, $beVerbose)

# Now make installer itself
puts "Making installer"
installerDir = File.join(artifactsDir, "install")
FileUtils.mkdir_p(installerDir)
FileUtils.install("#{shippingBinsDir}/BrowserPlusInstaller#{exeSuffix}",
                  "#{installerDir}/BrowserPlusInstaller#{exeSuffix}",
                  :mode => 0755, :verbose => $beVerbose)
FileUtils.install("#{$buildDir}/bins/installer/installer.config",
                  "#{installerDir}/installer.config",
                  :mode => 0644, :verbose => $beVerbose)
FileUtils.install("#{updatePermsDir}/BrowserPlus.crt",
                  "#{installerDir}/BrowserPlus.crt",
                  :mode => 0644, :verbose => $beVerbose)
FileUtils.install("#{$buildDir}/libs/installer/misc/strings.json",
                  "#{installerDir}/strings.json",
                  :mode => 0644, :verbose => $beVerbose)

# copy install ui files to installer
uiSrcDir = "#{topDir}/bins/installer/ui"
uiTgtDir = "#{installerDir}/ui"

# blow away target dir
FileUtils.rm_rf(uiTgtDir, :verbose => $beVerbose)

# use the localizeUI script to generate proper localized installer interface
# files
system("ruby -s #{localizeUIScript} -indir=#{uiSrcDir} -outdir=#{uiTgtDir}")

# make a pass thru installerDir removing .svn and .git turds
flushTurds(installerDir, $beVerbose)

# now copy in platform specific files required to generate the binaries
# we'll actually ship (.exe or .dmg)
if platform == "Darwin"
    FileUtils.install("#{topDir}/libs/installer/misc/BrowserPlusInstaller.template.dmg",
                      "#{installerDir}/",
                      :mode => 0644, :verbose => $verbose)

    FileUtils.install("#{topDir}/libs/installer/miscScripts/mac/buildInstaller.rb",
                      "#{installerDir}/",
                      :mode => 0644, :verbose => $verbose)

    FileUtils.install("#{topDir}/libs/installer/misc/bplus_icon.icns",
                      "#{installerDir}/", :mode => 0644, :verbose => $verbose)
else
    # Windows specific stuff includes:
    #  1. bootstrapping binary
    #  2. bptar.exe
    #  3. elzma.exe
    btTgtDir = "#{installerDir}/buildtools"
    FileUtils.mkdir_p(btTgtDir, :mode => 0755, :verbose => $beVerbose)

    FileUtils.install("#{$buildDir}/dist/bin/#{$intDir}/bptar.exe",
                      btTgtDir, :mode => 0644, :verbose => $beVerbose)

    FileUtils.install("#{$buildDir}/dist/bin/#{$intDir}/BrowserPlusBootstrapper.exe",
                      btTgtDir, :mode => 0644, :verbose => $beVerbose)

    FileUtils.install("#{externalsDir}/Windows/bin/elzma.exe",
                      btTgtDir, :mode => 0644, :verbose => $beVerbose)

    FileUtils.install("#{topDir}/libs/installer/miscScripts/win/buildInstaller.rb",
                      "#{installerDir}/",
                      :mode => 0644, :verbose => $verbose)
end

# let's copy in the generate.rb script which is the main driver
# of bpkg/installer generation
FileUtils.install("#{$buildDir}/support/build_scripts/generate.rb",
                  "#{artifactsDir}/",
                  :mode => 0755, :verbose => $verbose)

# and generate.rb needs a tool or two to do its duty
FileUtils.mkdir_p("#{artifactsDir}/tools")
FileUtils.install("#{$buildDir}/dist/bin/#{$intDir}/bpkg#{exeSuffix}",
                  "#{artifactsDir}/tools",
                  :mode => 0755, :verbose => $verbose)
FileUtils.install("#{topDir}/support/signing/sign.rb",
                  "#{artifactsDir}/tools",
                  :mode => 0755, :verbose => $verbose)

toolsDir = File.join(artifactsDir, "tools")
flushTurds(toolsDir, $beVerbose)
FileUtils.cp_r("#{topDir}/support/build_scripts/json", 
               "#{toolsDir}",
               :verbose => $beVerbose)

# finally let's drop our friend browserplus.js in the PAB so that it
# truly is a standalone package of all interesting parameterizable build
# artifacts
jsDir = File.join(artifactsDir, "js")
FileUtils.mkdir_p(jsDir)
Dir.glob(File.join(shippingResDir, "*.js")).each { |f|
  FileUtils.install(f, jsDir, :mode => 0644, :verbose => $beVerbose)
}

# remove previous installers and update pkg
FileUtils.rm_f(File.join($buildDir, "BrowserPlus_#{bpVersion}#{instSuffix}"))
FileUtils.rm_f(File.join($buildDir, "BrowserPlus_#{bpVersion}_full#{instSuffix}"))
FileUtils.rm_f(File.join($buildDir, "BrowserPlus_#{bpVersion}.bpkg"))

# generate installers and update pkg

# now lets determine distribution servers.
primary = "browserplus.yahoo.com"
secondaries = Array.new
if ENV.has_key? "BP_DISTRO_SERVERS"
  secondaries = ENV['BP_DISTRO_SERVERS'].split(/,/)
  primary = secondaries[0]
  secondaries = secondaries[1,10]
  secondaries = Array.new if secondaries == nil 
end

logLevel = "info"
if ENV.has_key? "BP_LOG_LEVEL"
  logLevel = ENV['BP_LOG_LEVEL']
end

logSizeKB = "256"
if ENV.has_key? "BP_LOG_SIZE_KB"
  logSizeKB = ENV['BP_LOG_SIZE_KB']
end

logDest = "file"
if ENV.has_key? "BP_LOG_DEST"
  logDest = ENV['BP_LOG_DEST']
end

logTime = "utc"
if ENV.has_key? "BP_LOG_TIME"
  logTime = ENV['BP_LOG_TIME']
end


pass = "FreeYourBrowser"
pubKey = "#{topDir}/support/signing/devel_certs/BrowserPlus.crt"
certStore = "#{topDir}/support/signing/Combined.crt"

generateCmd = "ruby \"#{artifactsDir}/generate.rb\" -pubKey=#{pubKey}"
generateCmd = generateCmd + " -certStore=#{certStore} -pass=#{pass} -outdir=\"#{$buildDir}\"" 
generateCmd = generateCmd + " -prefix=BrowserPlus -primary=#{primary}"
secondaries.each { |s|  generateCmd = generateCmd + " -secondary=#{s}" }
generateCmd = generateCmd + " -buildType=ephemeral -logLevel=#{logLevel}"
generateCmd = generateCmd + " -logSizeKB=#{logSizeKB}"
generateCmd = generateCmd + " -logDest=#{logDest} -logTime=#{logTime}"
system(generateCmd)

