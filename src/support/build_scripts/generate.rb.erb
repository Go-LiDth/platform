#!/usr/bin/env ruby
#
# A script to generate installers and bpkgs for the BrowserPlus platform.
# The idea is that given one bundle of build artifacts its possible to
# quickly generate different .exe/.dmg/.bpkg packages that are possibly
# skinned and/or parameterized to a specific set of distribution servers 
# and/or signing certificates.
# 
# Possible Inputs:
#   -pubKey    path to public signing key 
#   -privKey   path to private signing key
#   -certStore if you wish to allow browserplus to support updates/services
#              signed by multiple keys, you can provide an alternate path
#              to a certStore (combine keys by concatenating public keys
#              into a single file)
#   -pass      password associated with keypair
#   -authKey   path to authenticode signing key (only meaningful on win32)
#   -outdir    path where output should be left (should be a directory)
#   -prefix    filename prefix to append to installer and bpkg
#   -primary   hostname of primary distribution server
#   -secondary hostname of secondary distribution server (may be repeated)
#   -buildType a short buildtype tag, i.e. ymail, prod, dev, or beta.
#   -logLevel  platform log-level: debug|info|warn|error|fatal
#   -logSizeKB log file rollover size trigger in KB.
#   -logDest   log output destination (file|console|win32)
#   -logTime   log time format (utc|local|msec)
#   -config    a general mechanism which allows for overriding top level
#              keys in generated installer.config.  for instance, to
#              override 'permissions': -config=permissions=permissions.json
#              permissions.json will be parsed, toplevel keys overwritten,
#              and it will be written.
#   -verbose   be verbose
#   
# Potentially Helpful Hints
#
#   * pubKey will be guessed from privKey or vice versa if you don't
#     provide both
#   * pubKey/privKey specify the keys to use to *sign* the platform
#     distribution, certStore specifies the keys to distribute with the
#     platform for signature validation of downloaded updates and resources
#

require 'fileutils'
require 'rbconfig'
include Config

# json parsing library this works for 1.9 (builtin) or 1.8 
$:.push(File.join(File.dirname(__FILE__), "tools"))
begin
  require 'json'
rescue LoadError
  require "json/json.rb"
end

platform = CONFIG['arch'] =~ /mswin|mingw/ ? "Windows" : "Darwin"

exeSuffix = platform == "Windows" ? ".exe" : ""


# a function that takes a Hash and the name of a file which contains
# json.  it loads the file, adds keys (at the top level) and writes
# the file back out
def addKeysToJsonFile(keys, file)
  contents = JSON.parse(File.read(file))
  keys.each { |k,v| contents[k] = v }
  File.open(file, "w+") { |f| f.write JSON.generate(contents) }
end

$beVerbose = defined?($verbose) ? $verbose : false

## step 0: determine and output configuration
$version = "<%= $cmake["VersionString"] %>"
$topDir = File.dirname(__FILE__)
$topDirAbs = File.expand_path($topDir)
$workDir = File.join($topDir, "work")
$secondary = Array.new if !$secondary
$buildType = "unknown"
$logLevel = "info"
$logSizeKB = "256"
$logDest = "file"
$logTime = "utc"
$instCfgKeys = Hash.new

# authKey only needed for win32 prod signing.
$authKey = "unknown"

ARGV.each { |arg|
  k,v,a = arg.sub(/^-/, "").split '='
  # -secondary is special, it may be multiply provided
  if k == "secondary"
    $secondary.push(v)
  elsif k == "config"
    # 'a' refers to a file that contains json
    raise "cannot find file: #{a}" if !File.exist? a
    begin
      $instCfgKeys[v] = JSON.parse("[" + File.read(a) + "]")[0]
    rescue JSON::ParserError
      raise "cannot parse file: #{a}"
    end
  else 
    eval "$#{k} = '#{v}'"
  end
}

# let's automatically fill out what we can
$pubKey = $privKey.sub(/\.[^.]*$/, ".crt") if !$pubKey && $privKey
$privKey = $pubKey.sub(/\.[^.]*$/, ".pvk") if $pubKey && !$privKey
$outdir = Dir.getwd.to_s if !$outdir
$certStore = $pubKey if !$certStore

# verify and output command configuration
puts
puts "Verifying configuration:"
[ "prefix", "buildType", 
  "logLevel", "logSizeKB", "logDest", "logTime", 
  "primary", "secondary", 
  "certStore", "pubKey", "privKey", "pass", 
  "outdir"
].each {|k|
  raise "missing required cmdline param: -#{k}" if (!eval("$#{k}"))
  jsonArr = [ eval("$#{k}") ]
  v = JSON.generate(jsonArr)
  puts "  $#{k}:\t#{v}"
}

if $instCfgKeys.length
  puts
  puts "Additional top level keys to override installer.config:"
  $instCfgKeys.each { |k,v| puts "  #{k}:\t#{JSON.generate(v)}" }
end

puts

# perform some argument validation
raise "cannot find file: #{$pubKey}" if !File.exist? $pubKey
raise "cannot find file: #{$privKey}" if !File.exist? $privKey
raise "cannot find file: #{$certStore}" if !File.exist? $certStore
if platform=="Windows" && $buildType=="prod"
  raise "cannot find authenticode .pfx file" if !File.exist? $authKey
end
FileUtils.mkdir_p($outdir, :mode => 0755, :verbose => $beVerbose)

$bpkg = File.join($topDir, "tools", "bpkg")
if !File.executable? $bpkg
  $bpkg = $bpkg + ".exe"
  raise "can't find bpkg executable" if !File.executable? $bpkg
end

# prepend http:// to server names if needed
$secondary = $secondary.collect { |x| x =~ /^http/ ? x : "http://" + x }
$primary = "http://" + $primary if $primary !~ /^http/

## step 1: copy into build directry
if File.exist? $workDir
  puts "Removing previous build artifacts"
  FileUtils.rm_rf($workDir, :verbose => $beVerbose)
end

puts "Copying artifacts into work directory (#{$workDir})"
FileUtils.mkdir_p($workDir, :mode => 0755, :verbose => $beVerbose)  
FileUtils.cp_r(File.join($topDir, "install"), $workDir, :preserve => true, :verbose => $beVerbose)
FileUtils.cp_r(File.join($topDir, "update"), $workDir, :preserve => true, :verbose => $beVerbose)

# step 2: sub configuration files to provide distribution servers
#         and drop in pubkey
secondaryJson = $secondary.collect { |x| "\"#{x}\"" }.join(",")
allServersJson = [$primary].concat($secondary).collect { |x| "\"#{x}\"" }.join(",")

subs = {
  /BP_PRIMARY_DISTRO_SERVER_URL/ => "\"#{$primary}\"",
  /BP_SECONDARY_DISTRO_SERVERS/ => secondaryJson, 
  /BP_ALL_DISTRO_SERVERS/ => allServersJson, 
  /BP_BUILD_TYPE/ => "\"#{$buildType}\"",
  /BP_LOG_LEVEL/ => "#{$logLevel}",
  /BP_LOG_SIZE_KB/ => "#{$logSizeKB}",
  /BP_LOG_DEST/ => "#{$logDest}",
  /BP_LOG_TIME/ => "#{$logTime}"
}

# Special case for dev/int installers. Don't want them to have
# secondary servers, otherwise they can hit public server
# if internal server doesn't respond.  They should fail in this case.
internalInstallerSubs = {
  /BP_PRIMARY_DISTRO_SERVER_URL/ => "\"#{$primary}\"",
  /BP_ALL_DISTRO_SERVERS/ => "\"#{$primary}\"",
  /BP_BUILD_TYPE/ => "\"#{$buildType}\"",
  /BP_LOG_LEVEL/ => "#{$logLevel}",
  /BP_LOG_SIZE_KB/ => "#{$logSizeKB}",
  /BP_LOG_DEST/ => "#{$logDest}",
  /BP_LOG_TIME/ => "#{$logTime}"
}

# BrowserPlus.config gets all distro servers
f = File.join($workDir, "update", "daemon", "BrowserPlus.config")
puts "Updating #{f}"
contents = File.open(f, "r") { |myf| myf.read }
subs.each { |pat, rep| contents.gsub!(pat, rep) }
File.open(f, "w+") { |myf| myf.write contents }  

# dev/int installer gets only primary distro server,
# other installers get them all (see above comment)
f = File.join($workDir, "install", "installer.config")
puts "Updating #{f}"
contents = File.open(f, "r") { |myf| myf.read }
if $buildType == "int" || $buildType == "dev"
    internalInstallerSubs.each { |pat, rep| contents.gsub!(pat, rep) }
else
    subs.each { |pat, rep| contents.gsub!(pat, rep) }
end
File.open(f, "w+") { |myf| myf.write contents }  

# copy in certStore
[
  File.join("update", "permissions", "BrowserPlus.crt"),
  File.join("install", "BrowserPlus.crt")
].each { |f|
  f = File.join($workDir, f)
  puts "copy certStore to #{f}"
  FileUtils.cp($certStore, f, :preserve => true, :verbose => $beVerbose)
}

apass = ""

# step 3: authenticode sign binaries if required
if platform=="Windows" && $buildType=="prod"
  # get the pass
  STDOUT.print("Authenticode signing password: ")
  apass = STDIN.gets.chomp

  Dir.chdir($workDir) do
    signScript = File.join($topDirAbs, "tools", "sign.rb")
    filesToSign = Dir.glob("install/*.{cab,dll,exe}").join(" ")
    filesToSign += " " + Dir.glob("update/**/*.{cab,dll,exe}").join(" ")
    signCmd = "ruby -s \"#{signScript}\" sign -certType=prod -authenticodePassword=#{apass} -authKey=\"#{$authKey}\" #{filesToSign}"
    rv = system(signCmd)
    raise "Signing failed! Aborting!" if !rv
  end
end

# step 4: generate bpkg
puts "Making platform update bpkg"
bpkgName = "#{$prefix}_#{$version}.bpkg"
bpkgPath = File.join($outdir, bpkgName)
updateDir = File.join($workDir, "update")
rv = system("#{$bpkg} pack -publicKey #{$pubKey} -privateKey #{$privKey} -password #{$pass} -in #{updateDir} -out #{bpkgPath}")
raise "error generating bpkg" if !rv
puts "Created #{bpkgName}"    

# step 5: generate "net" installer
instCfgPath = File.join($workDir, "install", "installer.config")
addKeysToJsonFile($instCfgKeys, instCfgPath) if $instCfgKeys.length > 0
buildInstallerScript = File.join($workDir, "install", "buildInstaller.rb")
system("ruby -s \"#{buildInstallerScript}\" -fname=\"#{$prefix}_#{$version}#{exeSuffix}\" -outDir=\"#{$outdir}\"")

# step 6: generate "offline" installer

# first we'll copy in the bpkg
FileUtils.cp(bpkgPath, File.join($workDir, "install"), :preserve => true, :verbose => $beVerbose)

# now let's sub in the name of the bpkg
$instCfgKeys['package'] = bpkgName
addKeysToJsonFile($instCfgKeys, instCfgPath)

# build it!
system("ruby -s \"#{buildInstallerScript}\" -fname=\"#{$prefix}_#{$version}_full#{exeSuffix}\" -outDir=\"#{$outdir}\"")

# step 7: now authenticode sign resulting installers
if platform=="Windows" && $buildType=="prod"
  filesToSign = Dir.glob("#{$outdir}/*.exe").join(" ")
  signScript = File.join($topDirAbs, "tools", "sign.rb")
  signCmd = "ruby -s \"#{signScript}\" sign -authenticodePassword=#{apass} -certType=prod -authKey=\"#{$authKey}\" #{filesToSign}"
  rv = system(signCmd)
  raise "Signing failed! Aborting!" if !rv
end
