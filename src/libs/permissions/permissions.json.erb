<%
# a utility function to get all localazations for a specified key
# and to returnit as a json key
def getAllLocalizationsForKey(key)
    data = Hash.new
	keys = key.split '.'	
	$l10n.each { |locale,ldata|
	    data[locale] = ldata[keys[0]][keys[1]]
	}
    s = JSON.generator::State.new
    s.configure({ :indent => "            ", :array_nl => "\n", :object_nl => "\n"})
    data.to_json(s)
end	
%>
// 
// The BP_SERVICE_BLACKLIST and BP_PLATFORM_BLACKLIST allow for 
// blacklist entries which vary between development and production builds.
// The top-level CMakeLists.txt file sets these variables.  Blacklist
// entries which are common can either be set in that file, or entered
// here directly.
//
{                
    // Blacklisted services.  Entries are servicename and version number
    // (major.minor.micro), e.g. [ "badservice", "1.0.2"]
    //
    "blacklist" : [
        <%= $cmake["BP_SERVICE_BLACKLIST"] %>
    ],
                  
    // Blacklisted platform versions (major.minor.micro)
    //
    "platformBlacklist" : [
        <%= $cmake["BP_PLATFORM_BLACKLIST"] %>
    ],
     
    // Supported browsers and their capabilities
    "browserSupport": {
        // browserplus version
        "2" : {
            // platform 
            "Windows": {
                // browser
                "IE": {
                    // browser version range
                    "6-8.0": {
                        // capabilities
                        "FileBrowse":"supported",
                        "DnD":"activeX"
                    }
                },
                "Firefox": {
                    "3.0-3.6.2": {
                        "FileBrowse":"supported",
                        "DnD":"intercept"
                    },
                    "3.6.3-3.6.8": {
                        "FileBrowse":"supported",
                        "DnD":"html5"
                    }
                },
                "Safari": {
                    "1-5.0.2": {
                        "FileBrowse":"supported",
                        "DnD":"intercept"
                    }
                },
                "Chrome": {
                    "1-6.0.472": {
                        "FileBrowse":"supported",
                        "DnD":"intercept"
                    }
                }
            },
            "OSX": {
                "Firefox": {
                    "3-3.6.8": {
                        "FileBrowse":"supported",
                        "DnD":"intercept"
                    }
                },
                "Safari": {
                    "1-4.0.2": {
                        "FileBrowse":"supported",
                        "DnD":"intercept"
                    },
                    "4.0.2-5.0.1": {
                        "FileBrowse":"supported",
                        "DnD":"html5"
                    }
                },
                "Chrome": {
                    "5.0.375-6.0.472": {
                        "FileBrowse":"supported",
                        "DnD":"unsupported"
                    }
                }
            }
        }
    },

    // New public signing keys to be appended to BrowserPlus.crt if 
    // not already present.  Be careful with how newlines are embedded.
    "publicKeys" : [
//        "-----BEGIN CERTIFICATE-----\nMIIGKzCCBBOgAwIBAgIJALR4C+TE+6rBMA0GCSqGSIb3DQEBBQUAMIGrMQswCQYD\n...many lines removed...1n8ZkZ8FIV9cS4TKFVQdfjL03UE3I2A1qOjwPHSJMkqGi7fxyX8K11mx0AMq4Is=\n-----END CERTIFICATE-----\n"
    ],

    // autoUpdatePermissionMigration is used when one or more
    // services are being replaced by other services.  We don't
    // want to re-pester the user for permissions, so we migrate
    // the permissions across.  Each permission migrations is 
    // identified by a guid, which lets us ensure that the migration
    // is only applied once.  Each migration then contains a list of 
    // maps.  Within each map, if 'any'/'all' of the services
    // in 'old' have autoupdate true for the specified domain ('*'
    // matches all domains), we set autoupdate true for all
    // of the services in 'new' for that domain.
    //
    "autoUpdatePermissionMigration": {
//       "F81D2642-5689-46E3-A03F-D7436D04AED7":
//          [
//             {  "domain": "*.yahoo.com",
//                "operator": "or",
//                "old": ["Uploader"],
//                "new": ["FileTransfer"]
//             }
//          ]
    },

    // Service permission localizations
    //
    "servicePermissionLocalizations" : {
        "AllowBrowserPlus" : <%= getAllLocalizationsForKey("permissions.AllowBrowserPlus") %>,
        "DisallowBrowserPlus" : <%= getAllLocalizationsForKey("permissions.DisallowBrowserPlus") %>,
        "DisplayNotifications" : <%= getAllLocalizationsForKey("permissions.DisplayNotifications") %>,
        "ConnectToIRCServer" : <%= getAllLocalizationsForKey("permissions.ConnectToIRCServer") %>,
        "SilentServiceUpdate" : <%= getAllLocalizationsForKey("permissions.SilentServiceUpdate") %>,        
        "SilentPlatformUpdate" : <%= getAllLocalizationsForKey("permissions.SilentPlatformUpdate") %>
    }
}
