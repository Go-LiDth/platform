rough overview of the DistributionClient library design and
responsibilities.

Responsibilities:

1. The web services protocol between the distribution server and
   client software is completely abstracted in the DistQuery lib.
2. The DistQuery lib handles querying of multiple distribution servers
   with priority
3. Handling of downloading of "pending" service updates.
4. handling of installation of service updates.
5. Handling of dependency analysis and topological sorting for
   both "requires" and determining which/wether updates are available.


Code Organization

PUBLIC        +-----------------+  +-------------------+
API           | DistQuery.h     |  | ServiceUnpacker.h |
              +-----------------+  +-------------------+
                  |                         V
                  V                +---------------------+
       +---------------+           | ServiceUnpacker.cpp |
       | DistQuery.cpp |           +---------------------+
       +---------------+
               |
               V                   +------------------------+
       +------------------+ -----> | PendingUpdateCache     |
      /| ServiceQuery     |        +------------------------+
     / +------------------+ \
    /          |              -->  +------------------+
   |           V                   | WSProtocol       |
   |   +------------------+   -->  +------------------+
   |   | QueryCache       | /
   |   +------------------+
   \
    V
    +---------------------------+
    | ServiceQueryUtil          |
    +---------------------------+


DistQuery is the key abstraction/client entry point for all
interactions with the distribution server and pending update cache.  A
DistQuery instance handles any number of simultaneous outstanding
queries.

ServiceQuery has a nearly identical interface to DistQuery, but performs
all of the actual work.  ServiceQuery does _not_ handle multiple 
simultaneous requests.  The main reason that distquery and servicequery
are distinct, is because the management of multiple simultaneous queries
is thought complex enough to justify it's own abstraction.

QueryCache is responsible for attaining a complete list of available 
services from multiple distribution servers.  QueryCache will merge
the lists of available services into a single list, and performs very
short term caching of this list (~60s).  This short term caching is to
alleviate higher level code of the need to keep state around.

ServiceQueryUtil is where generally useful synchronous algorithms
performed on lists of services and requirements are performed.
Topological sort and requirement satisfaction is implemented in this
abstraction.

WSProtocol is where all protocol strings are stored.  Also, basic 
knowledge around formulating correct distribution server URLs is 
abstracted here.
  
The PendingUpdateCache is an abstraction of the disk representation
of the Service Update cache.  It is responsible for generating in memory
lists of the available updates, storing updates to disk (using service
unpacker) and for installing these updates into the service installation
directory.
 
ServiceUnpacker encapsulates logic required to validate and unpack a 
service bpkg from the distribution server.
